/* S1 - OPTIONS */

options {
    JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
}

/* S2 - USER CODE */

PARSER_BEGIN(CcalParser)

public class CcalParser {

  public static void main(String[] args){


    CcalParser parser;
    if(args.length == 0){
      System.out.println("Reading from standard input..");
      parser = new CcalParser(System.in);
    } else if (args.length == 1){
      System.out.println("Reading from file " + args[0] + "...");
      try{
        parser = new CcalParser(new java.io.FileInputStream(args[0]));
      } catch(java.io.FileNotFoundException e){
        System.err.println("File " + args[0] + " not found.");
        return;
      }

    }

    else {
      System.out.println("CCAL parser: Usage is one of:");
      System.out.println(" java CcalParser < inputfile");
      System.out.println("OR");
      System.out.println(" java CcalParser inputfile");
      return;
    }


     try {
       parser.program();
       System.out.println("Program parsed!");
     }
     catch (ParseException e){
     System.out.println(e.getMessage());

     System.out.println("There was a problem parsing this program");
     }
  }
}

PARSER_END(CcalParser)

/* S3 - TOKEN DEFINITIONS */


TOKEN_MGR_DECLS :
{
  static int comment_nest = 0;
}

SKIP : /*DEALING WITH WHITESPACES ETC.*/

{
  " "
| "\t"
| "\n"
| "\r"
|"\r\n"
| "\f"
}

SKIP : //COMMENTS
{

  < "//" ([" "-"~"])* ("\n" |"\t"| "\r" | "\r\n") >
  |"/*" { comment_nest++; } : IN_COMMENT
}


<IN_COMMENT> SKIP : // Dealing with nested comments
{
  "/*" { comment_nest++; }
| "*/" { comment_nest--;
               if (comment_nest == 0)
               SwitchTo(DEFAULT);}
| <~[]>
}


TOKEN : //keywords

{
 <VAR : "var">
|<INT : "integer">
|<CONST : "const">
|<RET : "return">
|<BOOL : "boolean">
|<VOID : "void">
|<MAIN : "main">
|<IF : "if">
|<ELSE : "else">
|<TRUE : "true">
|<FALSE : "false">
|<WHILE : "while">
|<SKIP_ : "skip">
}

TOKEN : //punctuation and symbols
{
 <COMMA : ",">
|<ASSIGNMENT: "=">
|<DOT : ".">
|<SEMI_COLON : ";">
|<COLON : ":">
|<LEFT_BRACE : "{">
|<RIGHT_BRACE : "}">
|<LEFT_BRACKET : "(">
|<RIGHT_BRACKET : ")">
|<PLUS : "+">
|<MINUS : "-">
|<NOT : "~">
|<OR : "||">
|<AND : "&&">
|<EQUALTO : "==">
|<NOT_EQUAL : "!=">
|<LESS_THAN : "<">
|<GREATER_THAN : ">">
|<LTHAN_EQUALTO : "<=">
|<GTHAN_EQUALTO : ">=">
}

TOKEN : //NUMBERS AND ID

{
  <NUMBER : "0"|(<MINUS>)?["1"-"9"](<DIGIT>)*>
| <#DIGIT : ["0" - "9"]>
| <ID: <LETTER>(<LETTER>|<DIGIT>|"_")*>
| <#LETTER : ["a" - "z", "A" - "Z"]>
}

TOKEN : // Anything not recognised so far
{
<OTHER : ~[]>
}

/* S4 - THE GRAMMAR */

void program() : {}{
  decl_list() function_list() main()
}

void decl_list(): {}{
  (decl() <SEMI_COLON> decl_list())?

}

void decl(): {}{

  var_decl() | const_decl()
}

void var_decl(): {}{
  <VAR> <ID> <COLON> type()
}

void const_decl(): {}{
  <CONST> <ID> <COLON> type() <ASSIGNMENT> expression()
}

void function_list(): {}{
  (function() function_list())?
}

void binary_arith_op(): {}{
  <PLUS> | <MINUS>
}


void type(): {} {
  <INT> | <BOOL> | <VOID>
}


void parameter_list(): {}{
  (nemp_parameter_list())?
}

void main():{}{
  <MAIN><LEFT_BRACE> decl_list() statement_block() <RIGHT_BRACE>
}


//conflict resolved
void nemp_arg_list():{} {
   <ID> (<COMMA> nemp_arg_list())?

}

void arg_list():{} {
  (nemp_arg_list())?


}

void comp_op():{} {
  <EQUALTO> | <NOT_EQUAL> | <LESS_THAN> | <LTHAN_EQUALTO> | <GREATER_THAN> | <GTHAN_EQUALTO>

}


//created condp() to deal with left recursion
void condition():{}{
  <NOT> condition()
  | <LEFT_BRACKET> condition() <RIGHT_BRACKET> condp()
  | fragment() comp_op() expression() condp()
}

void condp() : {}{
  ((<AND> | <OR>) condition())?
}

//conflict resolved with pr func
void fragment(): {} {
  <MINUS> <ID> | <ID> (<LEFT_BRACKET> arg_list() <RIGHT_BRACKET>)? | <NUMBER> | <TRUE> | <FALSE>
}

//created to resolve conflict
void pr(): {} {
  (binary_arith_op() fragment() pr())?
}

//conflict resolved wiht pr func
void expression():{}{
  fragment() pr() | <LEFT_BRACKET> expression() <RIGHT_BRACKET> pr()
}



//conflict resolved
void statement():{}{
<LEFT_BRACE>statement_block() <RIGHT_BRACE>
|<ID> (<LEFT_BRACKET> arg_list() <RIGHT_BRACKET>)? (<ASSIGNMENT> expression())?  <SEMI_COLON>
|<IF> condition() <LEFT_BRACE>statement_block()<RIGHT_BRACE> <ELSE> <LEFT_BRACE>statement_block()<RIGHT_BRACE>
|<WHILE> condition() <LEFT_BRACE> statement_block() <RIGHT_BRACE>
|<SKIP_> <SEMI_COLON>

}


void statement_block(): {}{
  (statement() statement_block())?

}


//conflic resolved
void nemp_parameter_list(): {} {
  <ID> <COLON> type() (<COMMA> nemp_parameter_list())?

}



void function():{}{
  type() <ID> <LEFT_BRACKET> parameter_list() <RIGHT_BRACKET>
  <LEFT_BRACE>
  decl_list() statement_block()
  <RET> <LEFT_BRACKET> (expression())? <RIGHT_BRACKET> <SEMI_COLON>
  <RIGHT_BRACE>

}
